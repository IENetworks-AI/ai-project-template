name: ML Pipeline CI/CD

on:
  push:
    branches: [ main, Test-Branch ]
  pull_request:
    branches: [ main, Test-Branch ]

jobs:
  # Code quality and validation checks (runs on all branches)
  validation:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Code Quality Checks
        run: |
          echo "🔍 Running code quality checks..."
          # Add any linting tools you want to use
          # Example: flake8, black, pylint, etc.
          echo "✅ Code quality checks completed"

      - name: Check File Structure
        run: |
          echo "📁 Checking project structure..."
          
          required_files=(
            "requirements.txt"
            "config/config.yaml"
            "pipelines/ai_pipeline.py"
            "data/Sales Dataset.csv"
            "src/__init__.py"
            "src/utils/__init__.py"
            "etl/extract/extract_data.py"
            "etl/transform/transform_data.py"
            "etl/load/load_data.py"
          )
          
          missing_files=()
          for file in "${required_files[@]}"; do
            if [ ! -f "$file" ]; then
              missing_files+=("$file")
            fi
          done
          
          if [ ${#missing_files[@]} -eq 0 ]; then
            echo "✅ All required files present"
          else
            echo "❌ Missing required files:"
            printf '%s\n' "${missing_files[@]}"
            exit 1
          fi

      - name: Security Scan
        run: |
          echo "🔒 Running security checks..."
          # Add security scanning tools here
          # Example: bandit, safety, etc.
          echo "✅ Security checks completed"

      - name: Check Documentation
        run: |
          echo "📚 Checking documentation..."
          
          required_docs=(
            "README.md"
            "ORACLE_DEPLOYMENT_SETUP.md"
          )
          
          for doc in "${required_docs[@]}"; do
            if [ -f "$doc" ]; then
              echo "✅ $doc found"
            else
              echo "⚠️ $doc missing"
            fi
          done

      - name: Branch-specific Validation
        run: |
          echo "🌿 Branch-specific checks for ${{ github.ref_name }}"
          echo "================================================"
          
          if [ "${{ github.ref_name }}" = "main" ]; then
            echo "🔒 Main branch detected"
            echo "   - Only admin merges allowed"
            echo "   - Deployment will run automatically"
            echo "   - All tests must pass"
            
          elif [ "${{ github.ref_name }}" = "Test-Branch" ]; then
            echo "🧪 Test-Branch detected"
            echo "   - Team collaboration branch"
            echo "   - All tests run but no deployment"
            echo "   - Code review required"
            
          else
            echo "🔧 Feature branch detected"
            echo "   - Development branch"
            echo "   - Basic tests run"
            echo "   - Create PR to Test-Branch when ready"
          fi

      - name: Pull Request Validation
        if: github.event_name == 'pull_request'
        run: |
          echo "🔍 Pull Request Validation"
          echo "=========================="
          echo "PR Title: ${{ github.event.pull_request.title }}"
          echo "PR Description: ${{ github.event.pull_request.body }}"
          echo "Source Branch: ${{ github.event.pull_request.head.ref }}"
          echo "Target Branch: ${{ github.event.pull_request.base.ref }}"
          echo ""
          
          # Check if PR has description
          if [ -z "${{ github.event.pull_request.body }}" ]; then
            echo "⚠️ Warning: Pull request has no description"
          else
            echo "✅ Pull request has description"
          fi
          
          # Check if PR is to main branch
          if [ "${{ github.event.pull_request.base.ref }}" = "main" ]; then
            echo "🚨 WARNING: Direct PR to main branch detected!"
            echo "   Please create PR to Test-Branch first for review"
          elif [ "${{ github.event.pull_request.base.ref }}" = "Test-Branch" ]; then
            echo "✅ PR to Test-Branch - this is the correct workflow"
          else
            echo "ℹ️ PR to other branch"
          fi

  # ML Pipeline jobs (runs on all branches)
  test:
    needs: validation
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Setup Kafka (if available)
        run: |
          echo "🔧 Setting up Kafka for testing..."
          if command -v docker &> /dev/null && command -v docker-compose &> /dev/null; then
            echo "✅ Docker and Docker Compose available"
            echo "🚀 Starting Kafka services..."
            docker-compose -f docker-compose.kafka.yml up -d
            echo "⏳ Waiting for Kafka to be ready..."
            sleep 30
            echo "✅ Kafka setup completed"
          else
            echo "⚠️ Docker not available, skipping Kafka setup"
          fi

      - name: Run tests
        run: |
          python -m pytest tests/ -v

  preprocess:
    needs: test
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Run data preprocessing
        run: |
          python pipelines/ai_pipeline.py

      - name: Archive processed data
        uses: actions/upload-artifact@v4
        with:
          name: processed-data-${{ github.sha }}
          path: data/processed/

  train:
    needs: preprocess
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Download processed data
        uses: actions/download-artifact@v4
        with:
          name: processed-data-${{ github.sha }}
          path: data/processed/

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Train and evaluate models
        run: |
          python pipelines/ai_pipeline.py

      - name: Archive models and results
        uses: actions/upload-artifact@v4
        with:
          name: models-and-results-${{ github.sha }}
          path: |
            models/
            data/processed/evaluation_results.csv
            data/processed/evaluation_report.txt

      - name: Display Model Performance
        run: |
          echo "🎯 Model Training Results:"
          echo "=========================="
          if [ -f "data/processed/evaluation_results.csv" ]; then
            cat data/processed/evaluation_results.csv
          fi
          if [ -f "data/processed/evaluation_report.txt" ]; then
            echo ""
            echo "📊 Detailed Evaluation Report:"
            cat data/processed/evaluation_report.txt
          fi

  # Deployment job - ONLY runs on main branch
  deploy:
    needs: train
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    steps:
      - uses: actions/checkout@v4

      - name: Download models and results
        uses: actions/download-artifact@v4
        with:
          name: models-and-results-${{ github.sha }}
          path: models/

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Check Oracle Deployment Configuration
        id: check-deployment
        run: |
          if [ -n "${{ secrets.ORACLE_SSH_KEY }}" ]; then
            echo "oracle_deploy=true" >> $GITHUB_OUTPUT
            echo "Oracle deployment secrets found - proceeding with deployment"
          else
            echo "oracle_deploy=false" >> $GITHUB_OUTPUT
            echo "Oracle deployment secrets not found - skipping deployment"
          fi

      - name: Setup SSH
        if: steps.check-deployment.outputs.oracle_deploy == 'true'
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.ORACLE_SSH_KEY }}" > ~/.ssh/oracle.key
          chmod 600 ~/.ssh/oracle.key
          ssh-keyscan -H 139.185.33.139 >> ~/.ssh/known_hosts

      - name: Test SSH Connection
        if: steps.check-deployment.outputs.oracle_deploy == 'true'
        run: |
          ssh -o StrictHostKeyChecking=no -i ~/.ssh/oracle.key ubuntu@139.185.33.139 "echo '✅ SSH connection successful'; uname -a"

      - name: Install rsync on server
        if: steps.check-deployment.outputs.oracle_deploy == 'true'
        run: |
          ssh -o StrictHostKeyChecking=no -i ~/.ssh/oracle.key ubuntu@139.185.33.139 << 'EOF'
            echo "🔧 Installing rsync on Oracle server..."
            
            # Fix dpkg interruption first
            echo "🔧 Fixing dpkg interruption..."
            sudo dpkg --configure -a
            
            # Handle apt locks if needed
            sudo killall apt apt-get || true
            sudo rm -f /var/lib/apt/lists/lock /var/cache/apt/archives/lock /var/lib/dpkg/lock* /var/lib/dpkg/lock-frontend || true
            
            # Update and install rsync
            sudo apt-get update -qq
            sudo apt-get install -y rsync -qq
            
            # Verify installation
            echo "🔍 Verifying rsync installation on server..."
            which rsync
            rsync --version | head -1
            echo "✅ rsync installed successfully on server"
          EOF

      - name: Install rsync on runner
        if: steps.check-deployment.outputs.oracle_deploy == 'true'
        run: |
          echo "🔧 Installing rsync on GitHub Actions runner..."
          sudo apt-get update -qq
          sudo apt-get install -y rsync -qq
          echo "✅ rsync installed successfully"
          
          # Verify installation
          echo "🔍 Verifying rsync installation..."
          which rsync || echo "rsync not found in PATH"
          rsync --version || echo "rsync command failed"
          
          # Check if rsync is in PATH
          echo "📋 PATH: $PATH"
          echo "📋 rsync location: $(which rsync 2>/dev/null || echo 'not found')"
          
          # Try to find rsync in common locations
          ls -la /usr/bin/rsync 2>/dev/null || echo "rsync not in /usr/bin"
          ls -la /bin/rsync 2>/dev/null || echo "rsync not in /bin"

      - name: Deploy Code to Oracle
        if: steps.check-deployment.outputs.oracle_deploy == 'true'
        run: |
          echo "🚀 Starting deployment to Oracle Cloud..."
          echo "📁 Current directory: $(pwd)"
          echo "📋 Files to deploy:"
          ls -la | head -10
          
          # Find rsync and use full path if needed
          RSYNC_CMD=$(which rsync 2>/dev/null || echo "/usr/bin/rsync")
          echo "🔄 Using rsync command: $RSYNC_CMD"
          
          # Test rsync command
          $RSYNC_CMD --version || echo "rsync command failed"
          
          echo "🔄 Running rsync command..."
          $RSYNC_CMD -avz --delete -e "ssh -i ~/.ssh/oracle.key -o StrictHostKeyChecking=no" ./ ubuntu@139.185.33.139:/home/ubuntu/ai-project-template/
          echo "✅ Code deployment completed"

      - name: Setup Oracle Server Environment
        if: steps.check-deployment.outputs.oracle_deploy == 'true'
        run: |
          ssh -o StrictHostKeyChecking=no -i ~/.ssh/oracle.key ubuntu@139.185.33.139 << 'EOF'
            echo "🔄 Starting deployment..."
            
            # Function to handle apt locks
            handle_apt_locks() {
                echo "🔧 Checking for apt locks..."
                sudo killall apt apt-get || true
                sudo rm -f /var/lib/apt/lists/lock /var/cache/apt/archives/lock /var/lib/dpkg/lock* || true
                echo "✅ Apt locks cleared"
            }
            
            # Function to install system dependencies
            install_system_deps() {
                echo "📦 Installing system dependencies..."
                handle_apt_locks
                sudo apt-get update
                sudo apt-get install -y python3 python3-pip python3-venv rsync git
                echo "✅ System dependencies installed"
            }
            
            # Navigate to project directory
            cd ~/ai-project-template
            
            # Install system dependencies if needed
            if ! command -v python3 &> /dev/null; then
                install_system_deps
            fi
            
            echo "📥 Code deployed via rsync from GitHub Actions..."
            
            if [ ! -d "venv" ]; then
                echo "📦 Creating virtual environment..."
                python3 -m venv venv
            fi
            
            echo "✅ Activating virtual environment..."
            source venv/bin/activate
            
            if [ -f "requirements.txt" ]; then
                echo "📦 Installing Python dependencies..."
                pip install --upgrade pip
                pip install -r requirements.txt
                pip install kafka-python confluent-kafka pyyaml
            fi
            
            # Set up systemd service for the API server
            echo "🔧 Setting up API server systemd service..."
            sudo tee /etc/systemd/system/mlapi.service > /dev/null << 'SERVICE_EOF'
            [Unit]
            Description=ML Pipeline API Server
            After=network.target
            
            [Service]
            Type=simple
            User=ubuntu
            WorkingDirectory=/home/ubuntu/ai-project-template
            ExecStart=/home/ubuntu/ai-project-template/venv/bin/python api/app.py
            Restart=always
            RestartSec=10
            Environment=PATH=/home/ubuntu/ai-project-template/venv/bin
            Environment=PORT=5000
            StandardOutput=journal
            StandardError=journal
            
            [Install]
            WantedBy=multi-user.target
            SERVICE_EOF
            
            # Reload systemd and enable service
            sudo systemctl daemon-reload
            sudo systemctl enable mlapi.service
            sudo systemctl start mlapi.service
            
            echo "✅ API server service configured, enabled, and started!"
            echo "✅ Deployment completed successfully!"
          EOF

      - name: Verify deployment
        if: steps.check-deployment.outputs.oracle_deploy == 'true'
        run: |
          ssh -o StrictHostKeyChecking=no -i ~/.ssh/oracle.key ubuntu@139.185.33.139 << 'EOF'
            echo "🔍 Verifying deployment..."
            
            # Check if API server files are deployed
            if [ -f "/home/ubuntu/ai-project-template/api/app.py" ]; then
              echo "✅ API server files deployed successfully"
            else
              echo "❌ API server files not found"
              exit 1
            fi
            
            # Check if models are deployed
            if [ -d "/home/ubuntu/ai-project-template/models" ]; then
              echo "✅ Models directory deployed successfully"
              ls -la /home/ubuntu/ai-project-template/models/
            else
              echo "⚠️ Models directory not found"
            fi
            
            # Check if service is configured and running
            if sudo systemctl is-enabled mlapi.service; then
              echo "✅ API server service is enabled"
            else
              echo "❌ API server service is not enabled"
              echo "🔧 Attempting to enable service..."
              sudo systemctl enable mlapi.service
            fi
            
            if sudo systemctl is-active mlapi.service; then
              echo "✅ API server service is running"
            else
              echo "❌ API server service is not running"
              echo "🔧 Attempting to start service..."
              sudo systemctl start mlapi.service
              sleep 5
              if sudo systemctl is-active mlapi.service; then
                echo "✅ API server service started successfully"
              else
                echo "❌ Failed to start API server service"
                echo "📋 Service logs:"
                sudo journalctl -u mlapi.service -n 20 --no-pager
              fi
            fi
            
            # Test API health
            echo "🧪 Testing API health..."
            if curl -f http://localhost:5000/health 2>/dev/null; then
              echo "✅ API health check passed"
            else
              echo "⚠️ API health check failed - service might still be starting"
              echo "📋 Service status:"
              sudo systemctl status mlapi.service --no-pager -l
            fi
            
            echo "🎉 Deployment verification completed successfully!"
          EOF

      - name: Skip Oracle Deployment
        if: steps.check-deployment.outputs.oracle_deploy == 'false'
        run: |
          echo "Oracle deployment skipped - SSH secrets not configured"
          echo ""
          echo "To enable Oracle deployment, add the following secret to your repository:"
          echo "  - ORACLE_SSH_KEY: Your SSH private key content"
          echo ""
          echo "Pipeline completed successfully! Models are available as artifacts."
          echo "You can download them from the Actions tab."

  # Summary job - runs on all branches
  summary:
    needs: [validation, test, preprocess, train]
    runs-on: ubuntu-latest
    steps:
      - name: Pipeline Summary
        run: |
          echo "🎯 ML Pipeline Summary"
          echo "======================"
          echo "Branch: ${{ github.ref_name }}"
          echo "Event: ${{ github.event_name }}"
          echo "Commit: ${{ github.sha }}"
          echo ""
          
          if [ "${{ github.ref_name }}" = "main" ]; then
            echo "✅ This is the main branch - deployment will run if secrets are configured"
          elif [ "${{ github.ref_name }}" = "Test-Branch" ]; then
            echo "🧪 This is the Test-Branch - deployment will NOT run (testing only)"
          else
            echo "🔧 This is a feature branch - testing pipeline components"
          fi
          
          echo ""
          echo "📋 Pipeline Steps Completed:"
          echo "  ✅ Validation (Code Quality, Security, Documentation)"
          echo "  ✅ Tests"
          echo "  ✅ Data Preprocessing"
          echo "  ✅ Model Training"
          
          if [ "${{ github.ref_name }}" = "main" ] && [ "${{ github.event_name }}" = "push" ]; then
            echo "  🚀 Deployment (if secrets configured)"
          else
            echo "  ⏭️  Deployment (skipped - not main branch or not push event)"
          fi
          
          echo ""
          echo "🎉 Pipeline completed successfully!"

