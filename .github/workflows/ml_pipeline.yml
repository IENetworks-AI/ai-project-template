name: ML Pipeline CI/CD

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Run tests
        run: |
          python -m pytest tests/ -v

  preprocess:
    needs: test
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Run data preprocessing
        run: |
          python pipelines/ai_pipeline.py

      - name: Archive processed data
        uses: actions/upload-artifact@v4
        with:
          name: processed-data
          path: data/processed/

  train:
    needs: preprocess
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Download processed data
        uses: actions/download-artifact@v4
        with:
          name: processed-data
          path: data/processed/

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Train and evaluate models
        run: |
          python pipelines/ai_pipeline.py

      - name: Archive models and results
        uses: actions/upload-artifact@v4
        with:
          name: models-and-results
          path: |
            models/
            data/processed/evaluation_results.csv
            data/processed/evaluation_report.txt

  deploy:
    needs: train
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    steps:
      - uses: actions/checkout@v4

      - name: Download models and results
        uses: actions/download-artifact@v4
        with:
          name: models-and-results
          path: models/

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Check Oracle Deployment Configuration
        id: check-deployment
        run: |
          if [ -n "${{ secrets.ORACLE_SSH_KEY }}" ]; then
            echo "oracle_deploy=true" >> $GITHUB_OUTPUT
            echo "Oracle deployment secrets found - proceeding with deployment"
          else
            echo "oracle_deploy=false" >> $GITHUB_OUTPUT
            echo "Oracle deployment secrets not found - skipping deployment"
          fi

      - name: Setup SSH
        if: steps.check-deployment.outputs.oracle_deploy == 'true'
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.ORACLE_SSH_KEY }}" > ~/.ssh/oracle.key
          chmod 600 ~/.ssh/oracle.key
          ssh-keyscan -H 139.185.33.139 >> ~/.ssh/known_hosts

      - name: Test SSH Connection
        if: steps.check-deployment.outputs.oracle_deploy == 'true'
        run: |
          ssh -o StrictHostKeyChecking=no -i ~/.ssh/oracle.key ubuntu@139.185.33.139 "echo '✅ SSH connection successful'; uname -a"

      - name: Install rsync on server
        if: steps.check-deployment.outputs.oracle_deploy == 'true'
        run: |
          ssh -o StrictHostKeyChecking=no -i ~/.ssh/oracle.key ubuntu@139.185.33.139 << 'EOF'
            echo "🔧 Installing rsync on Oracle server..."
            
            # Fix dpkg interruption first
            echo "🔧 Fixing dpkg interruption..."
            sudo dpkg --configure -a
            
            # Handle apt locks if needed
            sudo killall apt apt-get || true
            sudo rm -f /var/lib/apt/lists/lock /var/cache/apt/archives/lock /var/lib/dpkg/lock* /var/lib/dpkg/lock-frontend || true
            
            # Update and install rsync
            sudo apt-get update -qq
            sudo apt-get install -y rsync -qq
            
            # Verify installation
            echo "🔍 Verifying rsync installation on server..."
            which rsync
            rsync --version | head -1
            echo "✅ rsync installed successfully on server"
          EOF

      - name: Install rsync on runner
        if: steps.check-deployment.outputs.oracle_deploy == 'true'
        run: |
          echo "🔧 Installing rsync on GitHub Actions runner..."
          sudo apt-get update -qq
          sudo apt-get install -y rsync -qq
          echo "✅ rsync installed successfully"
          
          # Verify installation
          echo "🔍 Verifying rsync installation..."
          which rsync || echo "rsync not found in PATH"
          rsync --version || echo "rsync command failed"
          
          # Check if rsync is in PATH
          echo "📋 PATH: $PATH"
          echo "📋 rsync location: $(which rsync 2>/dev/null || echo 'not found')"
          
          # Try to find rsync in common locations
          ls -la /usr/bin/rsync 2>/dev/null || echo "rsync not in /usr/bin"
          ls -la /bin/rsync 2>/dev/null || echo "rsync not in /bin"

      - name: Deploy Code to Oracle
        if: steps.check-deployment.outputs.oracle_deploy == 'true'
        run: |
          echo "🚀 Starting deployment..."
          echo "📁 Current directory: $(pwd)"
          echo "📋 Files to deploy:"
          ls -la | head -10
          
          # Find rsync and use full path if needed
          RSYNC_CMD=$(which rsync 2>/dev/null || echo "/usr/bin/rsync")
          echo "🔄 Using rsync command: $RSYNC_CMD"
          
          # Test rsync command
          $RSYNC_CMD --version || echo "rsync command failed"
          
          echo "🔄 Running rsync command..."
          $RSYNC_CMD -avz --delete -e "ssh -i ~/.ssh/oracle.key -o StrictHostKeyChecking=no" ./ ubuntu@139.185.33.139:/home/ubuntu/ai-project-template/
          echo "✅ Code deployment completed"

      - name: Setup Oracle Server Environment
        if: steps.check-deployment.outputs.oracle_deploy == 'true'
        run: |
          ssh -o StrictHostKeyChecking=no -i ~/.ssh/oracle.key ubuntu@139.185.33.139 << 'EOF'
            echo "🔄 Starting deployment..."
            
            # Function to handle apt locks
            handle_apt_locks() {
                echo "🔧 Checking for apt locks..."
                sudo killall apt apt-get || true
                sudo rm -f /var/lib/apt/lists/lock /var/cache/apt/archives/lock /var/lib/dpkg/lock* || true
                echo "✅ Apt locks cleared"
            }
            
            # Function to install system dependencies
            install_system_deps() {
                echo "📦 Installing system dependencies..."
                handle_apt_locks
                sudo apt-get update
                sudo apt-get install -y python3 python3-pip python3-venv rsync git
                echo "✅ System dependencies installed"
            }
            
            # Navigate to project directory
            cd ~/ai-project-template
            
            # Install system dependencies if needed
            if ! command -v python3 &> /dev/null; then
                install_system_deps
            fi
            
            echo "📥 Code deployed via rsync from GitHub Actions..."
            
            if [ ! -d "venv" ]; then
                echo "📦 Creating virtual environment..."
                python3 -m venv venv
            fi
            
            echo "✅ Activating virtual environment..."
            source venv/bin/activate
            
            if [ -f "requirements.txt" ]; then
                echo "📦 Installing Python dependencies..."
                pip install --upgrade pip
                pip install -r requirements.txt
            fi
            
            # Set up systemd service for the ML pipeline
            echo "🔧 Setting up ML pipeline systemd service..."
            sudo tee /etc/systemd/system/mlpipeline.service > /dev/null << 'SERVICE_EOF'
            [Unit]
            Description=ML Pipeline Service
            After=network.target
            
            [Service]
            Type=simple
            User=ubuntu
            WorkingDirectory=/home/ubuntu/ai-project-template
            ExecStart=/home/ubuntu/ai-project-template/venv/bin/python pipelines/ai_pipeline.py
            Restart=on-failure
            RestartSec=5
            Environment=PATH=/home/ubuntu/ai-project-template/venv/bin
            
            [Install]
            WantedBy=multi-user.target
            SERVICE_EOF
            
            # Reload systemd and enable service
            sudo systemctl daemon-reload
            sudo systemctl enable mlpipeline.service
            
            echo "✅ ML Pipeline service configured and enabled!"
            echo "✅ Deployment completed successfully!"
          EOF

      - name: Verify deployment
        if: steps.check-deployment.outputs.oracle_deploy == 'true'
        run: |
          ssh -o StrictHostKeyChecking=no -i ~/.ssh/oracle.key ubuntu@139.185.33.139 << 'EOF'
            echo "🔍 Verifying deployment..."
            
            # Check if ML pipeline files are deployed
            if [ -f "/home/ubuntu/ai-project-template/pipelines/ai_pipeline.py" ]; then
              echo "✅ ML pipeline files deployed successfully"
            else
              echo "❌ ML pipeline files not found"
              exit 1
            fi
            
            # Check if models are deployed
            if [ -d "/home/ubuntu/ai-project-template/models" ]; then
              echo "✅ Models directory deployed successfully"
              ls -la /home/ubuntu/ai-project-template/models/
            else
              echo "⚠️ Models directory not found"
            fi
            
            # Check if service is configured
            if sudo systemctl is-enabled mlpipeline.service; then
              echo "✅ ML pipeline service is enabled"
            else
              echo "❌ ML pipeline service is not enabled"
            fi
            
            echo "🎉 Deployment verification completed successfully!"
          EOF

      - name: Skip Oracle Deployment
        if: steps.check-deployment.outputs.oracle_deploy == 'false'
        run: |
          echo "Oracle deployment skipped - SSH secrets not configured"
          echo ""
          echo "To enable Oracle deployment, add the following secret to your repository:"
          echo "  - ORACLE_SSH_KEY: Your SSH private key content"
          echo ""
          echo "Pipeline completed successfully! Models are available as artifacts."
          echo "You can download them from the Actions tab."

